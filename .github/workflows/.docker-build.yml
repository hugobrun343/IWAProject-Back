name: Build Docker Images and Deploy to Dokku

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.changes.outputs.matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changed services
        id: changes
        run: |
          # Get list of changed files
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
          echo "Changed files: $CHANGED_FILES"
          
          # Define services mapping (["NOM_DOSSIER"]="nom-service:nom-app-dokku")
          declare -A SERVICES=(
            ["Gateway-Service"]="gateway:homeguard"
          )
          
          # Build matrix for changed services
          MATRIX='{"include":[]}'
          
          for folder in "${!SERVICES[@]}"; do
            if echo "$CHANGED_FILES" | grep -q "^$folder/"; then
              IFS=':' read -r service dokku_app <<< "${SERVICES[$folder]}"
              echo "‚úÖ $folder changed - will deploy $service to $dokku_app"
              
              # Add to matrix
              MATRIX=$(echo "$MATRIX" | jq --arg folder "$folder" --arg service "$service" --arg dokku_app "$dokku_app" '.include += [{"folder": $folder, "service": $service, "dokku-app": $dokku_app}]')
            else
              echo "‚è≠Ô∏è $folder unchanged - skipping"
            fi
          done
          
          # Output matrix without extra spaces
          echo "matrix<<EOF" >> $GITHUB_OUTPUT
          echo "$MATRIX" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "Generated matrix: $MATRIX"

  build-and-push:
    needs: detect-changes
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
    permissions:
      contents: read
      packages: write
    # Skip job if no services changed
    if: needs.detect-changes.outputs.matrix != '{"include":[]}'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/iwaproject
          tags: |
            type=raw,value=${{ matrix.service }}-latest,enable={{is_default_branch}}
            type=semver,pattern={{version}},value=${{ github.ref_name }},enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.folder }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-to-dokku:
    needs: [detect-changes, build-and-push]
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
    permissions:
      contents: read
    # Skip job if no services changed
    if: needs.detect-changes.outputs.matrix != '{"include":[]}'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache APT packages
        uses: actions/cache@v3
        with:
          path: |
            /var/cache/apt/archives
            /var/lib/apt/lists
          key: ${{ runner.os }}-apt-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-apt-

      - name: Install Required Packages
        run: |
          sudo apt-get install -y strongswan=5.9.13-2ubuntu4 xl2tpd=1.3.18-1build2 net-tools=2.10-0.1ubuntu4.4 jq=1.7.1-3ubuntu0.24.04.1

      - name: Add VPN Connection
        run: |
          sudo bash -c 'cat > /etc/ipsec.conf <<EOF
          conn myvpn
            auto=add
            keyexchange=ikev1
            authby=secret
            type=transport
            left=%defaultroute
            leftprotoport=17/1701
            rightprotoport=17/1701
            right=${{ secrets.VPN_GATEWAY }}
            ike=3des-sha1-modp1024
            esp=3des-sha1
          EOF'

          sudo bash -c 'cat > /etc/ipsec.secrets <<EOF
          : PSK "${{ secrets.VPN_PSK }}"
          EOF'

          sudo chmod 600 /etc/ipsec.secrets

          sudo bash -c 'cat > /etc/xl2tpd/xl2tpd.conf <<EOF
          [lac myvpn]
          lns = ${{ secrets.VPN_GATEWAY }}
          ppp debug = yes
          pppoptfile = /etc/ppp/options.l2tpd.client
          length bit = yes
          EOF'

          sudo bash -c 'cat > /etc/ppp/options.l2tpd.client <<EOF
          ipcp-accept-local
          ipcp-accept-remote
          refuse-eap
          require-mschap-v2
          noccp
          noauth
          mtu 1280
          mru 1280
          noipdefault
          defaultroute
          usepeerdns
          connect-delay 5000
          domain "${{ secrets.VPN_NT_DOMAIN }}"
          name "${{ secrets.VPN_USERNAME }}"
          password "${{ secrets.VPN_PASSWORD }}"
          EOF'

          sudo chmod 600 /etc/ppp/options.l2tpd.client

      - name: Start VPN Connection
        run: |
          sudo mkdir -p /var/run/xl2tpd
          sudo touch /var/run/xl2tpd/l2tp-control
          sudo service ipsec restart
          sudo service xl2tpd restart

          echo "Starting VPN connection..."
          
          # Start IPSec with timeout
          timeout 30 sudo ipsec up myvpn || {
              echo "‚ùå IPSec connection failed or timeout"
              echo "Debug info:"
              sudo ipsec status
              exit 1
          }
          
          echo "c myvpn" | sudo tee /var/run/xl2tpd/l2tp-control

          # Wait for VPN with timeout (max 60 seconds)
          TIMEOUT=60
          COUNTER=0
          while ! ip addr show ppp0 | grep -q "inet "; do
              echo "Waiting for ppp0 to be up... ($COUNTER/$TIMEOUT)"
              sleep 1
              COUNTER=$((COUNTER + 1))
              if [ $COUNTER -gt $TIMEOUT ]; then
                  echo "‚ùå VPN connection timeout after $TIMEOUT seconds"
                  echo "Debug info:"
                  ip addr show
                  sudo ipsec status
                  exit 1
              fi
          done
          echo "‚úÖ ppp0 is up!"

          echo "Adding route to Dokku server..."
          sudo ip route add $(nslookup ${{ secrets.DOKKU_ADDR }} | awk '/^Address: / { print $2 }' | tail -n1) dev ppp0

      - name: Setup SSH Key for Dokku
        run: |
          echo "Setting up SSH key..."
          mkdir -p ~/.ssh
          cat <<EOF > ~/.ssh/id_rsa
          ${{ secrets.DOKKU_SSH_KEY }}
          EOF
          chmod 600 ~/.ssh/id_rsa
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/id_rsa
          ssh-keyscan -H "${{ secrets.DOKKU_ADDR }}" >> ~/.ssh/known_hosts || { echo "‚ùå ssh-keyscan failed"; exit 1; }

      - name: Deploy from GitHub Container Registry
        run: |
          echo "üöÄ Deploying ${{ matrix.service }} from GitHub Container Registry to ${{ matrix.dokku-app }}"
          
          # Always deploy latest version
          ssh dokku@${{ secrets.DOKKU_ADDR }} "git:from-image ${{ matrix.dokku-app }} ghcr.io/${{ github.repository_owner }}/iwaproject:${{ matrix.service }}-latest"

      - name: Disconnect VPN
        if: always()
        run: |
          echo "d myvpn" | sudo tee /var/run/xl2tpd/l2tp-control
          sudo ipsec down myvpn

      - name: Notify Deployment Success
        if: success()
        run: echo "üöÄ Successfully deployed ${{ matrix.service }} to Dokku!"
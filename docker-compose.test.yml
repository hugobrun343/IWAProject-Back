version: '3.8'

services:
  # Test databases for each service
  user-db-test:
    build:
      context: ./_Databases/test
      dockerfile: Dockerfile.user-postgres-test
    environment:
      POSTGRES_DB: user_test_db
      POSTGRES_USER: user_test
      POSTGRES_PASSWORD: user_test_pass
    ports:
      - "5433:5432"
    volumes:
      - user_test_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user_test -d user_test_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  announcement-db-test:
    build:
      context: ./_Databases/test
      dockerfile: Dockerfile.announcement-postgres-test
    environment:
      POSTGRES_DB: announcement_test_db
      POSTGRES_USER: announcement_test
      POSTGRES_PASSWORD: announcement_test_pass
    ports:
      - "5434:5432"
    volumes:
      - announcement_test_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U announcement_test -d announcement_test_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  application-db-test:
    build:
      context: ./_Databases/test
      dockerfile: Dockerfile.application-postgres-test
    environment:
      POSTGRES_DB: application_test_db
      POSTGRES_USER: application_test
      POSTGRES_PASSWORD: application_test_pass
    ports:
      - "5435:5432"
    volumes:
      - application_test_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U application_test -d application_test_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  chat-db-test:
    build:
      context: ./_Databases/test
      dockerfile: Dockerfile.chat-postgres-test
    environment:
      POSTGRES_DB: chat_test_db
      POSTGRES_USER: chat_test
      POSTGRES_PASSWORD: chat_test_pass
    ports:
      - "5436:5432"
    volumes:
      - chat_test_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U chat_test -d chat_test_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  favorite-db-test:
    build:
      context: ./_Databases/test
      dockerfile: Dockerfile.favorite-postgres-test
    environment:
      POSTGRES_DB: favorite_test_db
      POSTGRES_USER: favorite_test
      POSTGRES_PASSWORD: favorite_test_pass
    ports:
      - "5437:5432"
    volumes:
      - favorite_test_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U favorite_test -d favorite_test_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  log-db-test:
    build:
      context: ./_Databases/test
      dockerfile: Dockerfile.log-postgres-test
    environment:
      POSTGRES_DB: log_test_db
      POSTGRES_USER: log_test
      POSTGRES_PASSWORD: log_test_pass
    ports:
      - "5438:5432"
    volumes:
      - log_test_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U log_test -d log_test_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  payment-db-test:
    build:
      context: ./_Databases/test
      dockerfile: Dockerfile.payment-postgres-test
    environment:
      POSTGRES_DB: payment_test_db
      POSTGRES_USER: payment_test
      POSTGRES_PASSWORD: payment_test_pass
    ports:
      - "5439:5432"
    volumes:
      - payment_test_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U payment_test -d payment_test_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  rating-db-test:
    build:
      context: ./_Databases/test
      dockerfile: Dockerfile.rating-postgres-test
    environment:
      POSTGRES_DB: rating_test_db
      POSTGRES_USER: rating_test
      POSTGRES_PASSWORD: rating_test_pass
    ports:
      - "5440:5432"
    volumes:
      - rating_test_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U rating_test -d rating_test_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching tests (if needed)
  redis-test:
    image: redis:7-alpine
    ports:
      - "6380:6379"
    command: redis-server --requirepass test_password
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "test_password", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Test runner service (optional - for running tests in Docker)
  test-runner:
    image: maven:3.9.4-eclipse-temurin-21
    working_dir: /workspace
    volumes:
      - .:/workspace
      - maven_cache:/root/.m2
    environment:
      # Database connection strings for integration tests
      USER_DB_URL: jdbc:postgresql://user-db-test:5432/user_test_db
      USER_DB_USERNAME: user_test
      USER_DB_PASSWORD: user_test_pass
      
      ANNOUNCEMENT_DB_URL: jdbc:postgresql://announcement-db-test:5432/announcement_test_db
      ANNOUNCEMENT_DB_USERNAME: announcement_test
      ANNOUNCEMENT_DB_PASSWORD: announcement_test_pass
      
      APPLICATION_DB_URL: jdbc:postgresql://application-db-test:5432/application_test_db
      APPLICATION_DB_USERNAME: application_test
      APPLICATION_DB_PASSWORD: application_test_pass
      
      CHAT_DB_URL: jdbc:postgresql://chat-db-test:5432/chat_test_db
      CHAT_DB_USERNAME: chat_test
      CHAT_DB_PASSWORD: chat_test_pass
      
      FAVORITE_DB_URL: jdbc:postgresql://favorite-db-test:5432/favorite_test_db
      FAVORITE_DB_USERNAME: favorite_test
      FAVORITE_DB_PASSWORD: favorite_test_pass
      
      LOG_DB_URL: jdbc:postgresql://log-db-test:5432/log_test_db
      LOG_DB_USERNAME: log_test
      LOG_DB_PASSWORD: log_test_pass
      
      PAYMENT_DB_URL: jdbc:postgresql://payment-db-test:5432/payment_test_db
      PAYMENT_DB_USERNAME: payment_test
      PAYMENT_DB_PASSWORD: payment_test_pass
      
      RATING_DB_URL: jdbc:postgresql://rating-db-test:5432/rating_test_db
      RATING_DB_USERNAME: rating_test
      RATING_DB_PASSWORD: rating_test_pass
      
      REDIS_URL: redis://redis-test:6379
      REDIS_PASSWORD: test_password
    depends_on:
      user-db-test:
        condition: service_healthy
      announcement-db-test:
        condition: service_healthy
      application-db-test:
        condition: service_healthy
      chat-db-test:
        condition: service_healthy
      favorite-db-test:
        condition: service_healthy
      log-db-test:
        condition: service_healthy
      payment-db-test:
        condition: service_healthy
      rating-db-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
    command: tail -f /dev/null  # Keep container running

volumes:
  user_test_data:
  announcement_test_data:
  application_test_data:
  chat_test_data:
  favorite_test_data:
  log_test_data:
  payment_test_data:
  rating_test_data:
  maven_cache:

networks:
  default:
    name: iwa-test-network